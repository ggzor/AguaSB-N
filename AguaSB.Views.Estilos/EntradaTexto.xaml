<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:icons="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:pe="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AguaSB.Views.Conversores;component/Conversores.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.TextBox.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Sys:Double x:Key="TamanoLetra">12</Sys:Double>

    <ControlTemplate x:Key="PlantillaValidacion">
        <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
                <TextBlock TextBlock.Foreground="{DynamicResource ValidationErrorBrush}" TextBlock.FontSize="{StaticResource TamanoLetra}" HorizontalAlignment="Left" Margin="2" TextWrapping="Wrap" UseLayoutRounding="False" MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}" Text="{Binding ErrorContent}" />
            </DataTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <AdornedElementPlaceholder Name="Placeholder" />
            <Border Name="DefaultErrorViewer" Visibility="Collapsed" Background="Transparent">
                <TextBlock TextBlock.Foreground="{DynamicResource ValidationErrorBrush}" TextBlock.FontSize="{StaticResource TamanoLetra}" HorizontalAlignment="Left" Margin="0 2" TextWrapping="Wrap" UseLayoutRounding="False" MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}" Text="{Binding CurrentItem.ErrorContent}" />
            </Border>
            <pe:PopupEx x:Name="ValidationPopup" IsOpen="False" Placement="Bottom" AllowsTransparency="True" PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
                <Border Background="Transparent">
                    <TextBlock TextBlock.Foreground="{DynamicResource ValidationErrorBrush}" TextBlock.FontSize="{StaticResource TamanoLetra}" HorizontalAlignment="Left" Margin="0 2" TextWrapping="Wrap" UseLayoutRounding="False" Text="{Binding CurrentItem.ErrorContent}" />
                </Border>
            </pe:PopupEx>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.UsePopup)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="Popup.IsOpen" Value="True" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.UsePopup)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="UIElement.Visibility" Value="Visible" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.UsePopup)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Property="Popup.IsOpen" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(material:ValidationAssist.UsePopup)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BoolToVisibility}}" Property="UIElement.Visibility" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="ApplicationCommands.Cut">
                        <MenuItem.Icon>
                            <icons:Material Kind="ContentCut" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ApplicationCommands.Copy">
                        <MenuItem.Icon>
                            <icons:Material Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ApplicationCommands.Paste">
                        <MenuItem.Icon>
                            <icons:Material Kind="ContentPaste" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Setter Property="material:HintAssist.IsFloating" Value="True"/>
        <Setter Property="material:HintAssist.Hint" Value="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="material:HintAssist.FloatingScale" Value="1"/>
        <Setter Property="material:HintAssist.FloatingOffset" Value="0, -24"/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource PlantillaValidacion}"/>

        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Margin" Value="0,0,0,30"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Left"/>

        <!--Correccion de visualizacion-->
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    </Style>

    <Style x:Key="MaterialPasswordBox" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}">
        <Setter Property="material:HintAssist.IsFloating" Value="True"/>
        <Setter Property="material:HintAssist.Hint" Value="{Binding Path=Tag, RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="material:HintAssist.FloatingScale" Value="1"/>
        <Setter Property="material:HintAssist.FloatingOffset" Value="0, -24"/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource PlantillaValidacion}"/>

        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Margin" Value="0,0,0,30"/>

        <!--Correccion de visualizacion-->
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    </Style>
</ResourceDictionary>